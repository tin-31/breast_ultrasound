import os
import gdown
import streamlit as st
import tensorflow as tf
import numpy as np
import pandas as pd
import altair as alt
from PIL import Image
from io import BytesIO
from tensorflow.keras.applications.efficientnet import preprocess_input
from tensorflow.keras.preprocessing.image import img_to_array

# ===========================
# üß© T·∫¢I MODEL T·ª™ GOOGLE DRIVE
# ===========================
SEG_MODEL_PATH = "Seg_model.h5"
SEG_MODEL_ID = "1PC4ZNJJB5n-JKSc1mmyOLeQ5tClx4hcP"
if not os.path.exists(SEG_MODEL_PATH):
    gdown.download(f"https://drive.google.com/uc?id={SEG_MODEL_ID}", SEG_MODEL_PATH, quiet=False)

CLF_MODEL_PATH = "Classifier_model_2.h5"
CLF_MODEL_ID = "1fXPICuTkETep2oPiA56l0uMai2GusEJH"
if not os.path.exists(CLF_MODEL_PATH):
    gdown.download(f"https://drive.google.com/uc?id={CLF_MODEL_ID}", CLF_MODEL_PATH, quiet=False)


# ===========================
# ‚öôÔ∏è H√ÄM LOAD MODEL
# ===========================
@st.cache_resource
def load_model():
    def dice_loss(y_true, y_pred):
        y_true_flat = tf.reshape(y_true, [-1])
        y_pred_flat = tf.reshape(y_pred, [-1])
        intersection = tf.reduce_sum(y_true_flat * y_pred_flat)
        union = tf.reduce_sum(y_true_flat) + tf.reduce_sum(y_pred_flat)
        return 1 - 2 * intersection / union

    try:
        classifier = tf.keras.models.load_model(CLF_MODEL_PATH)
    except Exception as e:
        st.error(f"‚ùå Kh√¥ng th·ªÉ t·∫£i model ph√¢n lo·∫°i: {e}")
        st.stop()

    try:
        # ‚ö†Ô∏è th√™m safe_mode=False ƒë·ªÉ tr√°nh l·ªói lambda layer
        segmentor = tf.keras.models.load_model(
            SEG_MODEL_PATH,
            custom_objects={'dice_loss': dice_loss},
            safe_mode=False
        )
    except Exception as e:
        st.error(f"‚ùå Kh√¥ng th·ªÉ t·∫£i model ph√¢n ƒëo·∫°n: {e}")
        st.stop()

    return classifier, segmentor


# ===========================
# üì∏ H√ÄM X·ª¨ L√ù ·∫¢NH
# ===========================
def classify_preprop(image_file):
    """Ti·ªÅn x·ª≠ l√Ω ·∫£nh cho m√¥ h√¨nh ph√¢n lo·∫°i"""
    classifyInputShape = (224, 224)
    image = Image.open(BytesIO(image_file)).convert("RGB")
    image = image.resize(classifyInputShape)
    image = img_to_array(image)
    image = np.expand_dims(image, axis=0)
    image = preprocess_input(image)
    return image


def segment_preprop(image_file):
    """Ti·ªÅn x·ª≠ l√Ω ·∫£nh cho m√¥ h√¨nh ph√¢n ƒëo·∫°n"""
    segmentInputShape = (256, 256)
    image = Image.open(BytesIO(image_file)).convert('RGB')
    image = image.resize(segmentInputShape)
    image = np.array(image) / 255.0
    image = img_to_array(image)
    image = np.expand_dims(image, axis=0)
    return image


def segment_postprop(image, mask):
    """H·∫≠u x·ª≠ l√Ω: √°p m·∫∑t n·∫° kh·ªëi u l√™n ·∫£nh g·ªëc"""
    image = np.squeeze(image)
    mask = np.squeeze(mask)
    mask = np.expand_dims(mask, axis=2)
    return image * mask


def preprocessing_uploader(file, classifier, segmentor):
    image_file = file.read()
    # Ph√¢n lo·∫°i
    image_to_classify = classify_preprop(image_file)
    classify_output = classifier.predict(image_to_classify)
    # Ph√¢n ƒëo·∫°n
    image_to_segment = segment_preprop(image_file)
    segment_output = segmentor.predict(image_to_segment)[0]
    segment_output = segment_postprop(image_to_segment, segment_output)
    return classify_output, segment_output


# ===========================
# üß≠ GIAO DI·ªÜN STREAMLIT
# ===========================
app_mode = st.sidebar.selectbox(
    'Ch·ªçn trang',
    ['·ª®ng d·ª•ng ch·∫©n ƒëo√°n', 'Th√¥ng tin chung', 'Th·ªëng k√™ v·ªÅ d·ªØ li·ªáu hu·∫•n luy·ªán']
)

# ---------------------------
# 1Ô∏è‚É£ Trang th√¥ng tin chung
# ---------------------------
if app_mode == 'Th√¥ng tin chung':
    st.title('üë©‚Äç‚öïÔ∏è Gi·ªõi thi·ªáu v·ªÅ nh√≥m th·ª±c hi·ªán')
    st.markdown("""
    <style>
        .big-font { font-size:35px !important; }
        .name { font-size:25px !important; }
    </style>
    """, unsafe_allow_html=True)
    
    st.markdown('<p class="big-font"> H·ªçc sinh th·ª±c hi·ªán </p>', unsafe_allow_html=True)
    st.markdown('<p class="name"> L√™ V≈© Anh Tin - 11TH </p>', unsafe_allow_html=True)
    if os.path.exists('Tin.jpg'):
        st.image('Tin.jpg')

    st.markdown('<p class="big-font"> Tr∆∞·ªùng h·ªçc tham gia cu·ªôc thi </p>', unsafe_allow_html=True)
    st.markdown('<p class="name"> Tr∆∞·ªùng THPT chuy√™n Nguy·ªÖn Du </p>', unsafe_allow_html=True)
    if os.path.exists('school.jpg'):
        st.image('school.jpg')


# ---------------------------
# 2Ô∏è‚É£ Trang th·ªëng k√™ d·ªØ li·ªáu
# ---------------------------
elif app_mode == 'Th·ªëng k√™ v·ªÅ d·ªØ li·ªáu hu·∫•n luy·ªán':
    st.title('üìä Th·ªëng k√™ t·ªïng quan v·ªÅ t·∫≠p d·ªØ li·ªáu')
    st.caption("""
    T·∫≠p d·ªØ li·ªáu **Breast Ultrasound Images (BUI)** ƒë∆∞·ª£c t·ªïng h·ª£p t·ª´ hai ngu·ªìn c√¥ng khai:
    - *BUSI Dataset* c·ªßa Arya Shah (Kaggle)
    - *BUS-UCLM Dataset* c·ªßa Orvile
    
    T·ªïng c·ªông **1578 ·∫£nh si√™u √¢m v√∫** c√≥ m·∫∑t n·∫° ph√¢n ƒëo·∫°n t∆∞∆°ng ·ª©ng.
    D·ªØ li·ªáu ƒë∆∞·ª£c ti·ªÅn x·ª≠ l√Ω v√† resize v·ªÅ **256x256** pixel.
    """)
    st.markdown('[üìÇ Xem d·ªØ li·ªáu t·∫°i ƒë√¢y](https://drive.google.com/drive/folders/1eSAA5pMuEz1GgATBmvXbjjaihO1yBo1l?usp=drive_link)')


# ---------------------------
# 3Ô∏è‚É£ ·ª®ng d·ª•ng ch·∫©n ƒëo√°n
# ---------------------------
elif app_mode == '·ª®ng d·ª•ng ch·∫©n ƒëo√°n':
    st.title('ü©∫ ·ª®ng d·ª•ng ch·∫©n ƒëo√°n ung th∆∞ v√∫ t·ª´ ·∫£nh si√™u √¢m')

    classifier, segmentor = load_model()

    file = st.file_uploader("T·∫£i ·∫£nh si√™u √¢m v√∫ (JPG ho·∫∑c PNG):", type=["jpg", "png"])

    if file is None:
        st.info('‚¨ÜÔ∏è Vui l√≤ng t·∫£i ·∫£nh si√™u √¢m ƒë·ªÉ ch·∫©n ƒëo√°n.')
    else:
        slot = st.empty()
        slot.text('üîÑ ƒêang x·ª≠ l√Ω ·∫£nh...')

        classify_output, segment_output = preprocessing_uploader(file, classifier, segmentor)

        test_image = Image.open(file)
        st.image(test_image, caption="·∫¢nh ƒë·∫ßu v√†o", width=400)

        class_names = ['benign', 'malignant', 'normal']
        result_name = class_names[np.argmax(classify_output)]
        st.image(segment_output, caption="K·∫øt qu·∫£ ph√¢n ƒëo·∫°n kh·ªëi u", width=400)

        # ü©ª Hi·ªÉn th·ªã k·∫øt qu·∫£
        if result_name == 'benign':
            st.success('‚úÖ K·∫øt lu·∫≠n: **Kh·ªëi u l√†nh t√≠nh.**')
        elif result_name == 'malignant':
            st.error('‚ö†Ô∏è K·∫øt lu·∫≠n: **Kh·ªëi u √°c t√≠nh (ung th∆∞).**')
        else:
            st.info('ü©∂ K·∫øt lu·∫≠n: **Kh√¥ng ph√°t hi·ªán kh·ªëi u.**')

        slot.success('‚úÖ Ho√†n t·∫•t ch·∫©n ƒëo√°n!')

        # üìà Bi·ªÉu ƒë·ªì x√°c su·∫•t
        bar_frame = pd.DataFrame({
            'Lo·∫°i ch·∫©n ƒëo√°n': ["L√†nh t√≠nh", "√Åc t√≠nh", "B√¨nh th∆∞·ªùng"],
            'X√°c su·∫•t (%)': [classify_output[0,0]*100, classify_output[0,1]*100, classify_output[0,2]*100]
        })
        bar_chart = alt.Chart(bar_frame).mark_bar().encode(
            x='Lo·∫°i ch·∫©n ƒëo√°n', y='X√°c su·∫•t (%)'
        )
        st.altair_chart(bar_chart, use_container_width=True)

        # üßæ Ghi ch√∫ chi ti·∫øt
        st.write(f"- **L√†nh t√≠nh:** {classify_output[0,0]*100:.2f}%")
        st.write(f"- **√Åc t√≠nh:** {classify_output[0,1]*100:.2f}%")
        st.write(f"- **B√¨nh th∆∞·ªùng:** {classify_output[0,2]*100:.2f}%")
